package homework2;

import java.util.ArrayList;
import java.util.Iterator;


/**
 * A Graph is an abstraction for a mathematical graph with sets of <i>Nodes</i> and <i>Edges</i>.
 * Graphs are immutable.
 * <p>
 * <b>Generics:</b>
 * 	<pre>
 * NODE_T: the class used for the nodes.
 * 	</pre>
 * <b>The following fields are used in the specification:</b>
 * <pre>
 *   Nodes : sequence              // 
 * </pre>
 * </p>
 * 
 * @author yoavg
 *
 */
public final class Graph<NODE_T> {
	
	/**
	 * The Node class acts as a wrapper for an object of type NODE_T.
	 * Node is immutable.
	 * @author yoavg
	 *
	 */
	private final class Node {
		
		private final NODE_T node;
		private final ArrayList<NODE_T> children;
		
		/**
		 * Construct a new Node
		 * @requires node != null
		 * @effects Construct a new node, n, such that:
		 * 			n.node = node and n.children is empty
		 * 
		 */
		public void Node(NODE_T node) {
			
		}
		
		/**
		 * TODO: delete if redundant
		 * @effects Returns a copy of this.
		 */
		public NODE_T getNode() {
			
		}
		
		/**
		 * @return Returns an Iterator of this node's children
		 */
		public Iterator<NODE_T> getChildren() {
			
		}
		
		/**
		 * @requires child != null
		 * @modifies 
		 * @effects
		 */
		public void addChild(NODE_T child) {
			
		}
	}

	/**
	 * Abstraction function
	 * <p>
	 * 
	 * </p>
	 * Representation invariant
	 * <p>
	 * 
	 * </p>
	 */
	private final ArrayList<NODE_T> nodes;
	private final String name;
	
	/**
	 * @requires
	 * @modifies
	 * @effects
	 * @param name
	 */
	public void Graph(String name) {
		
	}
	
	/**
	 * @requires
	 * @modifies
	 * @effects
	 * @param name
	 */
	public String getName() {
		return this.name;
	}
	
	/**
	 * @requires
	 * @modifies
	 * @effects
	 * @param name
	 */
	public Iterator<NODE_T> getNodes() {
		
	}
	
	/**
	 * @requires
	 * @modifies
	 * @effects
	 * @param name
	 */
	public Iterator<NODE_T> getChildren(NODE_T node) {
		
	}
	
	/**
	 * @requires
	 * @modifies
	 * @effects
	 * @param name
	 */
	public void addNode(NODE_T node) {
		
	}
	
	/**
	 * @requires
	 * @modifies
	 * @effects
	 * @param name
	 */
	public void addEdge(NODE_T source_node, NODE_T destination_node) {
		
	}
	
	/**
	 * @requires
	 * @modifies
	 * @effects
	 * @param name
	 */
	public boolean equals(Object o) {
		
	}
	
	/**
	 * @requires
	 * @modifies
	 * @effects
	 * @param name
	 */
	public int hashCode() {
		
	}
	
	/**
	 * @requires
	 * @modifies
	 * @effects
	 * @param name
	 */
	public String toString() {
		
	}
	
	/**
	 * @requires
	 * @modifies
	 * @effects
	 * @param name
	 */
	private void checkRep() {
		
	}
}
